/**
 * Definition for isBadVersion()
 * 
 * @param {integer} version number
 * @return {boolean} whether the version is bad
 * isBadVersion = function(version) {
 *     ...
 * };
 */

/**
 * @param {function} isBadVersion()
 * @return {function}
 */
var solution = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
    
    return function(n) {
        var left = 1, right = n, mid 
        while (left <= right) {
            mid = Math.floor(left+((right-left)/2))
            if (isBadVersion(mid) && !isBadVersion(mid - 1)) {
                    return mid 
            } else if (isBadVersion(mid) && isBadVersion(mid - 1)) {
                    right = mid - 1
            } else {
                left = mid + 1
            }
        }
    };
};

/*
Use binary search to find the version where isBadVersion(mid) is true and isBadVersion(mid -1) is false. This indicates that version is 
the first bad version.If both isBadVersion(mid) and isBadVersion(mid -1) are true, this means the first bad version lies somewhere left to mid. 
In this case, set new right and calculate new mid.
If isBadVersion(mid) is false, this mens the first bad version lies somewhere right to mid. In this case, set new left and calculate new mid. 
 */
 
