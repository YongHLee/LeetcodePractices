# List method
# class MovingAverage:
#     def __init__(self, size: int):
#         self.size = size
#         self.queue = []
#         self.sum = 0

#     def next(self, val: int) -> float:
#         self.queue.append(val)
#         self.sum += val
#         # calculate the sum of the moving window
#         if len(self.queue) > self.size:
#             self.sum -= self.queue[len(self.queue) - 1 - self.size]
#         return self.sum / min(len(self.queue), self.size)
    
# deque method 
from collections import deque
class MovingAverage:
    def __init__(self, size: int):
        self.size = size
        self.queue = deque()
        # number of elements seen so far
        self.window_sum = 0
        self.count = 0

    def next(self, val: int) -> float:
        self.count += 1
        # calculate the new sum by shifting the window
        self.queue.append(val)
        tail = self.queue.popleft() if self.count > self.size else 0
        self.window_sum = self.window_sum - tail + val

        return self.window_sum / min(self.size, self.count)
