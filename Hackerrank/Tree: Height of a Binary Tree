'''
class Node:
      def __init__(self,info): 
          self.info = info  
          self.left = None  
          self.right = None 
           

       // this is a node of the tree , which contains info as data, left , right
'''

def height(root):
    count = -1
    if root is None:
        return count
    count = countHeight(root, count)
    return count

# You can write much cleaning code using below commented portion.
    # if root is None:
    #     return -1
    # return max(1 + height(root.left), 1 + height(root.right))

def countHeight(root, count):
    while root is not None:
        leftCount = countHeight(root.left, count)
        rightCount = countHeight(root.right, count)
        count = max(leftCount + 1, rightCount + 1)
        return count
    return count
    
    
// For JS
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**

var height = function(root) {
  let count = -1
  if (root === null) return - 1
  return Math.max(1 + height(root.left), 1 + height(root.right)
}

