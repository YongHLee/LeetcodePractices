/**
 * @param {number[][]} grid
 * @param {number} k
 * @return {number[][]}
 */
    
var shiftGrid = function(grid, k) {
    k = k % (grid.length * grid[0].length)
    if (k == 0) return grid
    while (k > 0) {
        var shiftedGrid = []
        for (let i = 0; i < grid.length; i++) shiftedGrid.push([])
        for (let i = 0; i < grid.length; i++) {
            for (let j = 0; j < grid[0].length; j++) {
                if (i == 0 && j == 0) {
                    shiftedGrid[0][0] = grid[grid.length -1][grid[0].length - 1]
                } else if (j == 0 && i !== 0) {
                    shiftedGrid[i][0] = grid[i - 1][grid[0].length - 1]
                } else {
                    shiftedGrid[i][j] = grid[i][j-1]
                }
            }   
        }
        grid = shiftedGrid
        --k
    }
    return shiftedGrid
};

/*
If you think the problem in the most basic case, let k = 1. This means each element will be shifted once. 
For example, element at index [1][2] will be moved to [1][3]. Or you can think this as shifted [1][3] value will be old [1][2] value. 
Then we can say something like shiftedgrid[i][j] = grid[i][j-1] for k = 1. This works for most cases, but there are some edge cases. 
Case 1. [i][j] = [0][0], this means shiftedGrid[0][0] = grid[grid.length -1][grid[0].length - 1].
Case 2. [i][j] = [i][0], this means shiftedGrid[i][0] = grid[i - 1][grid[0].length - 1]. 
And since k can be greator than 0, run this is a while loop. 

While this method works, this has time complexity of k * i * j. I think we can do better by not iterating this k times. 
We can deduce what the shifted value will be by applying multiple shift at once instead of using loop to simulate one shift at a time. 
 */

var shiftGrid = function(grid, k) {
    k = k % (grid.length * grid[0].length)
    if (k == 0) return grid
    var shiftedGrid = []
    for (let i = 0; i < grid.length; i++) shiftedGrid.push([])
    for (let i = 0; i < grid.length; i++) {
        for (let j = 0; j < grid[0].length; j++) {
            var iShift = i - Math.floor(k / grid[0].length)
            var jShift = j - (k % grid[0].length)
            if (jShift < 0) {
                jShift = grid[0].length + jShift
                --iShift
            }
            if (iShift < 0) {
                iShift = grid.length + iShift
            } 
            shiftedGrid[i][j] = grid[iShift][jShift]
        }   
    }
    return shiftedGrid
};

/*
By using remainder, we can see how much shifting will be needed. If shifting needed more than the length of row or column, 
we need to calculate the offset. So if the shift from the iterated value is located past column length, apply appropriate offeset and 
shift row by extra 1 row. If the shift from the iterated value is located past row length, apply appropriate offeset. 
 */
