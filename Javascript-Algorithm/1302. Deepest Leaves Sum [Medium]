


// Depth First Search Method
var deepestLeavesSum = function(root) {
    let deepestSum = 0
    let depth = 0
    let stack = [root, 0]
    
    while (stack.length > 0) {
        let node, curr_depth, nodeInfo
        curr_depth = stack.pop()
        node = stack.pop()
        // node = nodeInfo[0]
        // curr_depth = nodeInfo[1]
        if (node.left === null && node.right === null) {
            if (depth < curr_depth) {
                deepestSum = node.val
                depth = curr_depth
            } else if (depth === curr_depth) {
                deepestSum += node.val
            }
        } else {
            if (node.right !== null) {
                stack.push(node.right, curr_depth + 1)
            }
            if (node.left !== null) {
                stack.push(node.left, curr_depth + 1)
            }
        }
    }
    
    return deepestSum
};


// Recursion Method 
var deepestLeavesSum = function(root) {
    let count = -1
    count =  countHeight(root, count)
    let deepSum = sumDeepNode(root, count)
    return deepSum
};

var countHeight = function (root, count) {
    if (root !== null) {
        let leftCount = countHeight(root.left, count)
        let rightCount = countHeight(root.right, count)
        count = Math.max(leftCount + 1, rightCount + 1)
        return count
    }
     return count
}

var sumDeepNode = function (root, count) {
    let sum = 0
    if (root !== null) {
        if (count > 0) {
        let leftSum = sumDeepNode(root.left, count - 1)
        let rightSum = sumDeepNode(root.right, count - 1)
        sum = leftSum + rightSum
        } else {
            return root.val
        }
    }
    return sum
}
