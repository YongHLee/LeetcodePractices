/**
 * @param {number[]} nums1
 * @param {number} m
 * @param {number[]} nums2
 * @param {number} n
 * @return {void} Do not return anything, modify nums1 in-place instead.
 */
// traverse forward method
// var merge = function(nums1, m, nums2, n) {
//     let ans = []
//     let nums1idx = 0
//     let nums2idx = 0
//     for (let i = 0; i < n + m; i++) {
//         if (nums1idx === m || nums1[nums1idx] > nums2[nums2idx]) {
//              ans.push(nums2[nums2idx])
//              nums2idx++
//         } else {
//              ans.push(nums1[nums1idx])
//              nums1idx++
//         }
//     }
//     for (let i = 0; i < n + m; i++) {
//         nums1[i] = ans[i]
//     }
// };

// traverse backward method (in place)
var merge = function(nums1, m, nums2, n) {
    let nums1idx = m - 1
    let nums2idx = n - 1
    let idx = m + n - 1
    while (idx >= 0) {
        if (nums2idx < 0 || nums1[nums1idx] > nums2[nums2idx]) {
             nums1[idx] = nums1[nums1idx]
            nums1idx--
             idx--
        } else {
             nums1[idx] = nums2[nums2idx]
            nums2idx--
            idx--
        }
    }
};

