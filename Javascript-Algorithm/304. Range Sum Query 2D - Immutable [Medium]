// /**
//  * @param {number[][]} matrix
//  */
// Cache Row appraoch
// var NumMatrix = function(matrix) {
//     let sumArr = new Array(matrix.length)
//     for (let row = 0; row < matrix.length; row++) {
//         sumArr[row] = new Array(matrix[0].length)
//         let sum = 0
//         for (let col = 0; col < matrix[0].length; col++) {
//             sum += matrix[row][col]
//             sumArr[row][col] = sum  
//         }
//     }
//     this.sumArr = sumArr    
// };

// /** 
//  * @param {number} row1 
//  * @param {number} col1 
//  * @param {number} row2 
//  * @param {number} col2
//  * @return {number}
//  */
// NumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {
//     let sumOfRegion = 0
//     for (let row = row1; row <= row2; row++) {
//         let leftside = this.sumArr[row][col1 - 1] ? this.sumArr[row][col1 - 1] : 0
//         sumOfRegion += this.sumArr[row][col2] - leftside
//     }
//     return sumOfRegion
// };



// Caching region approach
var NumMatrix = function(matrix) {
    let sumArr = new Array(matrix.length)
    for (let row = 0; row < matrix.length; row++) {
        sumArr[row] = new Array(matrix[0].length)
        for (let col = 0; col < matrix[0].length; col++) {
            let part1 = sumArr[row - 1] ? sumArr[row - 1][col] : 0
            let part2 = sumArr[row][col - 1] ? sumArr[row][col - 1] : 0
            let part3 = sumArr[row - 1] ? (sumArr[row - 1][col - 1] ? sumArr[row - 1][col - 1] : 0) : 0
            sumArr[row][col] = part1 + part2 - part3 + matrix[row][col]
        }
    }
    this.sumArr = sumArr   
};

/** 
 * @param {number} row1 
 * @param {number} col1 
 * @param {number} row2 
 * @param {number} col2
 * @return {number}
 */
NumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {
    let part1 = this.sumArr[row1 - 1] ? this.sumArr[row1 - 1][col2] : 0
    let part2 = this.sumArr[row2][col1 - 1] ? this.sumArr[row2][col1 - 1] : 0
    let part3 = this.sumArr[row1 - 1] ? (this.sumArr[row1 - 1][col1 - 1] ? this.sumArr[row1 - 1][col1 - 1] : 0) : 0 
    return this.sumArr[row2][col2] - part1 - part2 + part3
};
